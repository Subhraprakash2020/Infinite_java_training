package com.java.inventory;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class OrederImpl implements OrderDAO{
	
	Connection connection;
	PreparedStatement pst;
	
	@Override
	public String createOrder(String stockId, int QtyOrd) throws ClassNotFoundException, SQLException {
		
		
		connection = ConnectionHelper.getConnection();
		
		String checkStock = "Select QuantityAvail from stock where stociId = ?";
		pst = connection.prepareStatement(checkStock);
		pst.setString(1, stockId);
		ResultSet stockResultSet = pst.executeQuery();
		
		if(stockResultSet == pst.executeQuery()) {
			int availableQuantity = stockResultSet.getInt("QuantityAvail");
			if(availableQuantity >= QtyOrd) {
				String getMaxOrderIdQuery = "SELECT MAX(OrderId) FROM Orders";
				pst = connection.prepareStatement(getMaxOrderIdQuery);
				ResultSet orderResultSet = pst.executeQuery();
				int maxOrderId = 0;
				 if (orderResultSet.next()) {
	                    String maxOrderIdStr = orderResultSet.getString(1);
	                    if (maxOrderIdStr != null && maxOrderIdStr.matches("S\\d+")) {
	                        maxOrderId = Integer.parseInt(maxOrderIdStr.substring(1));
	                    }
	                }
	                maxOrderId++;
	                String newOrderId = String.format("S%03d", maxOrderId);
	                String insertOrderQuery = "INSERT INTO Orders (OrderId, StockID, QtyOrd) VALUES (?, ?, ?)";
	                pst = connection.prepareStatement(insertOrderQuery);
	                pst.setString(1, newOrderId);
	                pst.setString(2, stockId);
	                pst.setInt(3, QtyOrd);

	                int rowsInserted = pst.executeUpdate();
	                if (rowsInserted > 0) {
	                    // Step 4: Update the stock table with the remaining quantity
	                    String updateStockQuery = "UPDATE Stock SET QuantityAvail = QuantityAvail - ? WHERE stockid = ?";
	                    pst = connection.prepareStatement(updateStockQuery);
	                    pst.setInt(1, QtyOrd);
	                    pst.setString(2, stockId);
	                    pst.executeUpdate();

	                    return newOrderId; // Return the newly generated order ID
	                }
			}
		}
        
		return null;
	}

}
