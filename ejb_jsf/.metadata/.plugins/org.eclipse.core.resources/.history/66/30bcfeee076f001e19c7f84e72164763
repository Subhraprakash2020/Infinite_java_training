package com.java.ejb;

import java.sql.SQLException;
import java.util.List;
import java.util.Map;

import javax.faces.context.FacesContext;
import javax.naming.NamingException;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;




public class PatientEjbImpl {
	SessionFactory sf;
	Session session;
//	public String addPatientEjb(Patient patient,String dID) throws NamingException {
//		DoctorEjbBeanRemote remote = RemoteHelper.lookupRemoteStatelessEmploy();
//		patient.setDoctorid(dID);
//		remote.addPatientDao(patient);
//		 return "AddPatient.jsp?faces-redirect=true";
//	}
	public String redirectPatient(String drId) throws NamingException {
		DoctorEjbBeanRemote remote = RemoteHelper.lookupRemoteStatelessEmploy();
		Map<String, Object> sessionMap = 
				FacesContext.getCurrentInstance().getExternalContext().getSessionMap();
		sessionMap.put("drId", drId);
		 return "AddPatient.jsp?faces-redirect=true";
	}
	
	public List<Patient> showPatientEjb() throws NamingException, ClassNotFoundException, SQLException{
		DoctorEjbBeanRemote remote = RemoteHelper.lookupRemoteStatelessEmploy();
		return remote.showPatient();
	}
	public String redirectRoomAllocation(String pid) throws NamingException {
		DoctorEjbBeanRemote remote = RemoteHelper.lookupRemoteStatelessEmploy();
		Map<String, Object> sessionMap = 
				FacesContext.getCurrentInstance().getExternalContext().getSessionMap();
		sessionMap.put("pid", pid);
		 return "RoomAllocation.jsp?faces-redirect=true";
	}
	
	public String createAccountDao(Patient patient) {
        try {
            session = sf.openSession();
            Transaction transaction = session.beginTransaction();

            String username = patient.getPid();
            Patient patientFound = session.get(Patient.class,name);

            if (patientFound == null) {
                String pwd = EncryptPassword.getCode(patient.getPassword());

                patient.setPassword(pwd);
                patient.setStatus("OTP PENDING");

                session.save(patient);

                int otp = generateOtp();
                Date currentDate = new Date();
                OTP otpEntity = new OTP();
                otpEntity.setPatient(patient);
                otpEntity.setOtpCode(otp);
                otpEntity.setGeneratedOn(currentDate);

                session.save(otpEntity);

                String body = "Welcome to Mr/Miss  " + patient.getName() + "\r\n" +
                        "Your OTP Generated Successfully..." + "\r\n" +
                        "OTP is " + otp;
                MailSend.mailOtp(patient.getEmail(), "Otp Send Successfully...", body);

                transaction.commit();
                return "Otp Send To Email...";
            } else {
                return "User-Name already Exists...";
            }
        } catch (Exception e) {
            // Handle exceptions
            e.printStackTrace();
            return "An error occurred.";
        } finally {
            if (session != null) {
                session.close();
            }
        }
    }

    // Other methods, constructors, and Hibernate setup go here
}

}
